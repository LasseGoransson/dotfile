snippet beg "begin{} / end{}" 
\begin{$1}
	$0
\end{$1}
endsnippet

snippet def
\overset{$2}{$1} $0
endsnippet

snippet "scr (\S.*\S)" "screenshot figure with name" wr
`!p
if snip.c == "":
	import os
	import re
	path = vim.eval('expand("%:p:h")')
	os.chdir(path)
	
	imgName = match.group(1)
	fileName = re.sub('\s','-',imgName)
	fileExt = '.png'
	num = 1

	if not os.path.exists("images"):
		os.mkdir("images")

	if not os.path.exists("images/" + fileName+fileExt):
		totalName = "images/" + fileName+fileExt
	else:
		while os.path.exists("images/" + fileName+"-"+str(num)+fileExt):
			num += 1
		totalName = "images/" + fileName+"-"+str(num)+fileExt


	os.system("import " + totalName)
	snip += r"\begin{figure}[H]"
	snip >> 1
	snip += r"\centering"
	snip += r"\includegraphics[width=0.8\textwidth]{" + totalName + "}"
	snip += r'\caption{' + imgName + r'}'
	snip += r'\label{fig:' + fileName + r'}'
	snip << 1
	snip += r"\end{figure}"

`
endsnippet

snippet isvg "includesvg"
\begin{figure}[H]
    \centering
    \def\svgwidth{0.5\textwidth}
    \includesvg[$0]{$1}
\end{figure}
endsnippet




# MATH
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\begin{align*}
$1
\end{align*}
$0
endsnippet

snippet bma "BMatrix"
\begin{bmatrix}
	$0
\end{bmatrix}
endsnippet


snippet bar "Bar"
\bar{$1} $0
endsnippet

snippet hat "Hat"
\hat{$1} $0
endsnippet


snippet un "Dobbel undeline"
\underline{\underline{$1}}$0
endsnippet


# Section and subsection

snippet sec "Section"
\section{$1}
endsnippet

snippet ssec "Subsection" 
\subsection*{$1}
endsnippet

snippet sssec "SubSubSection"
\subsubsection{$1}
endsnippet

snippet lec "Lection" 

\lec{$1} 

$0

endsnippet

# Subscript 

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# fractions

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# Sympy

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet int
\int_{$1}^{$2}$0
endsnippet


# Latex template
snippet textem "LaTeX Template" bA 

\documentclass{article}
\usepackage{commonnote} % own package in ~/texmf

\begin{document}
\title{Course Name \\\ \normalsize{Fall 2020 - SDU}}
\date{}
\maketitle

$0

\end{document}

endsnippet

snippet Sigma "sigma" i
\Sigma $0
endsnippet

snippet sigma "sigma" i
\sigma $0
endsnippet

snippet alp "alpha" i
\alpha $0
endsnippet

snippet mu "alpha" i
\mu $0
endsnippet


snippet pdf "pdf import" b

\newpage
\begin{figure}[H] 
    \centering
   \includegraphics[page=$2,width=\textwidth]{$1} 
\end{figure}
$0
endsnippet

snippet "notePDF (.*)" "Add pdf pages with text underneith" wr
`!p
import subprocess as sp
cmd = "pdfinfo " + match.group(1) + r" | sed -nE 's/Pages:\s+([0-9]+)/\1/p'"
pages = int(sp.check_output(cmd,shell=True))

for p in range(1,pages+1):
	if(p != 1):
		snip += r"\newpage"
	snip += r"\begin{figure}[h]"
	snip >> 1
	snip += r"\makebox[\textwidth][c]{"
	snip >> 1
	snip += r"\centering"
	snip += r"\includegraphics[page="+str(p)+r",width=\textwidth]{"+match.group(1)+"}"
	snip << 1
	snip += r"}"
	snip += r"\makebox[\textwidth][c]{"
	snip >> 1
	snip += r"\rule{\pagewidth}{0.01pt}"
	snip << 1
	snip += r"}"
	snip << 1
	snip += r"\end{figure}"
	snip += r""
	snip += r""
	snip += r""
`
endsnippet
